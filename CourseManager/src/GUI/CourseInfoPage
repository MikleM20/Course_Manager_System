package GUI;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class CourseInfoPage extends JFrame {

    private List<Course> prereqs;
    private List<Course> antireqs;
    private String[] prereqNameIDs;
    private String[] antireqsNameIDs;

    private JPanel outerPanel;

    private JPanel innerContentPanel;
    private JLabel courseName;
    private JLabel courseID;
    private JLabel descriptionLabel;
    private JTextArea descriptionField;
    private JScrollPane descriptionPane;
    private JLabel labInfoLabel;
    private JTextArea labInfoField;
    private JScrollPane labInfoPane;
    private JLabel courseHours;
    private JLabel courseCredits;
    private JLabel prereqsLabel;
    private JList<String> prereqsList;
    private JScrollPane prereqPane;
    private JLabel antireqsLabel;
    private JList<String> antireqsList;
    private JScrollPane anitreqPane;

    private JButton btnEdit;

    public CourseInfoPage(Course selectedCourse){

        // Get Prereqs
        prereqs = new ArrayList<Course>();
        if (selectedCourse.getPrerequisites() != null) {
            for (int i=0; i<selectedCourse.getPrerequisites().length; i++){
                prereqs.add( CSVTools.findCourse(selectedCourse.getPrerequisites()[i]) );
            }
            prereqNameIDs = new String[prereqs.size()];
            for (int i=0; i<prereqs.size(); i++){
                prereqNameIDs[i] = prereqs.get(i).getName()+"   "+prereqs.get(i).getID();
            }
        } else {
            prereqNameIDs = new String[1];
            prereqNameIDs[0] = "There are no Prerequisites for this Course";
        }

        // Get Antireqs
        antireqs = new ArrayList<Course>();
        if (selectedCourse.getAntirequisites() != null){
            for(int i=0; i<selectedCourse.getAntirequisites().length; i++){
                antireqs.add( CSVTools.findCourse(selectedCourse.getAntirequisites()[i]) );
            }
            antireqsNameIDs = new String[antireqs.size()];
            for (int i=0; i<antireqs.size(); i++){
                antireqsNameIDs[i] = antireqs.get(i).getName()+"   "+antireqs.get(i).getID();
            }
        } else {
            antireqsNameIDs = new String[1];
            antireqsNameIDs[0] = "There are no anti-requisites for this Course";
        }


        setResizable(false);
        setTitle("Course Info Page");
        setBounds(500, 400, 900, 550);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        outerPanel = new JPanel();
        outerPanel.setBackground(new Color(176, 196, 222));
        outerPanel.setBounds(0,0, 900, 550);
        getContentPane().add(outerPanel);
        outerPanel.setLayout(null);

        innerContentPanel = new JPanel();
        innerContentPanel.setBackground(SystemColor.window);
        innerContentPanel.setBounds(10, 10, 865, 490);
        outerPanel.add(innerContentPanel);
        innerContentPanel.setLayout(null);

        courseName = new JLabel("Course: "+selectedCourse.getName());
        courseName.setBounds(10, 10, 545, 20);
        courseName.setFont(new Font("Tahoma", Font.PLAIN, 18));
        innerContentPanel.add(courseName);

        courseID = new JLabel("ID: "+selectedCourse.getID());
        courseID.setBounds(10, 40, 545, 20);
        courseID.setFont(new Font("Tahoma", Font.PLAIN, 18));
        innerContentPanel.add(courseID);

        descriptionLabel = new JLabel("Description");
        descriptionLabel.setFont(new Font("Tahoma", Font.PLAIN, 18));
        descriptionLabel.setBounds(10, 80, 422, 20);
        innerContentPanel.add(descriptionLabel);

        descriptionField = new JTextArea(selectedCourse.getDescription());
        descriptionField.setBounds(10, 110, 422, 170);
        descriptionField.setEditable(false);
        descriptionPane = new JScrollPane(descriptionField);
        descriptionPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        descriptionPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        descriptionPane.setBounds(descriptionField.getBounds());
        innerContentPanel.add(descriptionPane);

        labInfoLabel = new JLabel("Lab Information");
        labInfoLabel.setFont(new Font("Tahoma", Font.PLAIN, 18));
        labInfoLabel.setBounds(10, 300, 422, 20);
        innerContentPanel.add(labInfoLabel);

        labInfoField = new JTextArea(selectedCourse.getLabinfo());
        labInfoField.setBounds(10, 330, 422, 100 );
        labInfoField.setEditable(false);
        labInfoPane = new JScrollPane(labInfoField);
        labInfoPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        labInfoPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        labInfoPane.setBounds(labInfoField.getBounds());
        innerContentPanel.add(labInfoPane);

        courseHours = new JLabel("Hours of Instruction per week: "+selectedCourse.getHours());
        courseHours.setBounds(10,450, 300, 18);
        courseHours.setFont(new Font("Tahoma", Font.PLAIN, 15));
        innerContentPanel.add(courseHours);

        courseCredits = new JLabel("Credits: "+selectedCourse.getCredits());
        courseCredits.setBounds(330, 450, 100,18);
        courseCredits.setFont(new Font("Tahoma", Font.PLAIN, 15));
        innerContentPanel.add(courseCredits);

        prereqsLabel = new JLabel("Course Prerequisites:");
        prereqsLabel.setFont(new Font("Tahoma", Font.PLAIN, 18));
        prereqsLabel.setBounds(520, 80, 300, 20);
        innerContentPanel.add(prereqsLabel);

        prereqsList = new JList<>(prereqNameIDs);
        prereqsList.setBounds(452, 110, 400, 150);
        prereqPane = new JScrollPane(prereqsList);
        prereqPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        prereqPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        prereqPane.setBounds(prereqsList.getBounds());
        innerContentPanel.add(prereqPane);
        prereqsList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (prereqsList.getSelectedValue() != null){
                    int courseID = Integer.parseInt(prereqsList.getSelectedValue().split("   ")[1]);
                    CourseInfoPage selCourse = new CourseInfoPage(CSVTools.findCourse(courseID));
                    prereqsList.clearSelection();
                    selCourse.setVisible(true);
                }
                return;
            }
        });


        antireqsLabel = new JLabel("Course Anti-requisites:");
        antireqsLabel.setFont(new Font("Tahoma", Font.PLAIN, 18));
        antireqsLabel.setBounds(520, 280, 300, 20);
        innerContentPanel.add(antireqsLabel);

        antireqsList = new JList<>(antireqsNameIDs);
        antireqsList.setBounds(452,310, 400, 150);
        anitreqPane = new JScrollPane(antireqsList);
        anitreqPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        anitreqPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        anitreqPane.setBounds(antireqsList.getBounds());
        innerContentPanel.add(anitreqPane);
        antireqsList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (antireqsList.getSelectedValue() != null){
                    int courseID = Integer.parseInt(antireqsList.getSelectedValue().split("   ")[1]);
                    CourseInfoPage selCourse = new CourseInfoPage(CSVTools.findCourse(courseID));
                    antireqsList.clearSelection();
                    selCourse.setVisible(true);
                }
                return;
            }
        });










    }



}
